AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Morse Lambda Microservices Deployment

Parameters:
  ProjectName:
    Type: String
    Description: Connect Information name
  # GoogleClientId:
  #   Type: String
  #   Description: GoogleClientId
  # GoogleClientSecret:
  #   Type: String
  #   Description: GoogleClientSecret
  Stage:
    Type: String
    Description: Stage of Apigateway
    Default: Prod

# Conditions:
#   HasGoogleClientId: !Not [!Equals [!Ref GoogleClientId, ""]]
#   HasGoogleClientSecret: !Not [!Equals [!Ref GoogleClientSecret, ""]]

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-google-test-pool
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      MfaConfiguration: "OFF"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate: 
          - email
      Schema:
        - AttributeDataType: "String"
          Mutable: true
          Name: email
          Required: true

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub morsecode-google-domain
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub ${ProjectName}-google-test-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH 
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
      AuthSessionValidity: 3
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: minutes
        RefreshToken: days
        IdToken: minutes
      EnableTokenRevocation: true
      PreventUserExistenceErrors: ENABLED
      CallbackURLs:
        - "http://localhost:3000"
      LogoutURLs:
        - "http://localhost:3000"
      SupportedIdentityProviders:
        - "COGNITO"
        # - !If [HasGoogleClientId, "Google", !Ref "AWS::NoValue"]
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - phone
        - profile
        - aws.cognito.signin.user.admin

  CognitoAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "cognito-google-api-${Stage}"
      StageName: !Ref Stage
      OpenApiVersion: '2.0'
      Description: API supporting the application
      TracingEnabled: true
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,DELETE,GET,HEAD,POST,PUT'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoTestAuth 
        Authorizers:
          MyCognitoTestAuth:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
  
  # CognitoTestGoogleIdentityProvider:
  #   Type: AWS::Cognito::UserPoolIdentityProvider
  #   Condition: HasGoogleClientId
  #   Properties:
  #     ProviderName: Google
  #     ProviderType: Google
  #     UserPoolId: !Ref CognitoUserPool
  #     AttributeMapping: 
  #       email: 'email'
  #       family_name: 'family_name'
  #       given_name: 'given_name'
  #       name: 'name'
  #       username: 'sub'
  #     ProviderDetails:
  #       client_id: !Sub GoogleClientId
  #       client_secret: !Sub GoogleClientSecret
  #       authorize_scopes: "openid email profile"

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ../../bin/hello-world.zip
      FunctionName: !Sub "${ProjectName}-hello-world-google"
      Handler: bootstrap
      Runtime: provided.al2
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref CognitoAPIGateway
            Auth:
              Authorizer: MyCognitoTestAuth
Outputs:
  CognitoAPIGateway:
    Description: "API Gateway endpoint URL para documentos"
    Value: !Sub "https://${CognitoAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"